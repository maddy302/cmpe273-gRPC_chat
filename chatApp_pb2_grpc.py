# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import chatApp_pb2 as chatApp__pb2


class ExecuteExpressionStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.ExecExp = channel.unary_unary(
        '/ExecuteExpression/ExecExp',
        request_serializer=chatApp__pb2.Expression.SerializeToString,
        response_deserializer=chatApp__pb2.Expression.FromString,
        )


class ExecuteExpressionServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def ExecExp(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_ExecuteExpressionServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'ExecExp': grpc.unary_unary_rpc_method_handler(
          servicer.ExecExp,
          request_deserializer=chatApp__pb2.Expression.FromString,
          response_serializer=chatApp__pb2.Expression.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'ExecuteExpression', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class getMessageFromServerStreamStub(object):
  """servers stream where it all publishes the messages. Client needs to subscribe to this to be able to receive messages

  response-streaming RPC 
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.getMessageStream = channel.unary_stream(
        '/getMessageFromServerStream/getMessageStream',
        request_serializer=chatApp__pb2.toClient.SerializeToString,
        response_deserializer=chatApp__pb2.sendMessage.FromString,
        )
    self.putMessageStream = channel.stream_unary(
        '/getMessageFromServerStream/putMessageStream',
        request_serializer=chatApp__pb2.sendMessage.SerializeToString,
        response_deserializer=chatApp__pb2.sentConfirmation.FromString,
        )
    self.restoreMessages = channel.unary_unary(
        '/getMessageFromServerStream/restoreMessages',
        request_serializer=chatApp__pb2.restoreMessagesReq.SerializeToString,
        response_deserializer=chatApp__pb2.restoreMessagesRes.FromString,
        )
    self.getMessage = channel.unary_unary(
        '/getMessageFromServerStream/getMessage',
        request_serializer=chatApp__pb2.checkMessages.SerializeToString,
        response_deserializer=chatApp__pb2.singleMessage.FromString,
        )
    self.sendMessageService = channel.unary_unary(
        '/getMessageFromServerStream/sendMessageService',
        request_serializer=chatApp__pb2.sendMessage.SerializeToString,
        response_deserializer=chatApp__pb2.sentConfirmation.FromString,
        )
    self.notifyOnlineStatus = channel.unary_unary(
        '/getMessageFromServerStream/notifyOnlineStatus',
        request_serializer=chatApp__pb2.informServerOnlineStatus.SerializeToString,
        response_deserializer=chatApp__pb2.informServerOnlineStatus.FromString,
        )
    self.getOnlineUsers = channel.unary_stream(
        '/getMessageFromServerStream/getOnlineUsers',
        request_serializer=chatApp__pb2.onlineUsers.SerializeToString,
        response_deserializer=chatApp__pb2.onlineUsers.FromString,
        )
    self.getOfflineMessage = channel.unary_unary(
        '/getMessageFromServerStream/getOfflineMessage',
        request_serializer=chatApp__pb2.toClient.SerializeToString,
        response_deserializer=chatApp__pb2.sendMessageRepeated.FromString,
        )


class getMessageFromServerStreamServicer(object):
  """servers stream where it all publishes the messages. Client needs to subscribe to this to be able to receive messages

  response-streaming RPC 
  """

  def getMessageStream(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def putMessageStream(self, request_iterator, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def restoreMessages(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def getMessage(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def sendMessageService(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def notifyOnlineStatus(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def getOnlineUsers(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def getOfflineMessage(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_getMessageFromServerStreamServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'getMessageStream': grpc.unary_stream_rpc_method_handler(
          servicer.getMessageStream,
          request_deserializer=chatApp__pb2.toClient.FromString,
          response_serializer=chatApp__pb2.sendMessage.SerializeToString,
      ),
      'putMessageStream': grpc.stream_unary_rpc_method_handler(
          servicer.putMessageStream,
          request_deserializer=chatApp__pb2.sendMessage.FromString,
          response_serializer=chatApp__pb2.sentConfirmation.SerializeToString,
      ),
      'restoreMessages': grpc.unary_unary_rpc_method_handler(
          servicer.restoreMessages,
          request_deserializer=chatApp__pb2.restoreMessagesReq.FromString,
          response_serializer=chatApp__pb2.restoreMessagesRes.SerializeToString,
      ),
      'getMessage': grpc.unary_unary_rpc_method_handler(
          servicer.getMessage,
          request_deserializer=chatApp__pb2.checkMessages.FromString,
          response_serializer=chatApp__pb2.singleMessage.SerializeToString,
      ),
      'sendMessageService': grpc.unary_unary_rpc_method_handler(
          servicer.sendMessageService,
          request_deserializer=chatApp__pb2.sendMessage.FromString,
          response_serializer=chatApp__pb2.sentConfirmation.SerializeToString,
      ),
      'notifyOnlineStatus': grpc.unary_unary_rpc_method_handler(
          servicer.notifyOnlineStatus,
          request_deserializer=chatApp__pb2.informServerOnlineStatus.FromString,
          response_serializer=chatApp__pb2.informServerOnlineStatus.SerializeToString,
      ),
      'getOnlineUsers': grpc.unary_stream_rpc_method_handler(
          servicer.getOnlineUsers,
          request_deserializer=chatApp__pb2.onlineUsers.FromString,
          response_serializer=chatApp__pb2.onlineUsers.SerializeToString,
      ),
      'getOfflineMessage': grpc.unary_unary_rpc_method_handler(
          servicer.getOfflineMessage,
          request_deserializer=chatApp__pb2.toClient.FromString,
          response_serializer=chatApp__pb2.sendMessageRepeated.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'getMessageFromServerStream', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class groupChatServicerStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.notifyOnlineStatus = channel.unary_unary(
        '/groupChatServicer/notifyOnlineStatus',
        request_serializer=chatApp__pb2.informServerOnlineStatus.SerializeToString,
        response_deserializer=chatApp__pb2.informServerOnlineStatus.FromString,
        )
    self.getGroupMemebers = channel.unary_unary(
        '/groupChatServicer/getGroupMemebers',
        request_serializer=chatApp__pb2.group_user.SerializeToString,
        response_deserializer=chatApp__pb2.group_list.FromString,
        )
    self.sendMessageToGroup = channel.unary_unary(
        '/groupChatServicer/sendMessageToGroup',
        request_serializer=chatApp__pb2.groupMessage.SerializeToString,
        response_deserializer=chatApp__pb2.sentConfirmation.FromString,
        )
    self.receiveMessageFromGroup = channel.unary_stream(
        '/groupChatServicer/receiveMessageFromGroup',
        request_serializer=chatApp__pb2.group_user.SerializeToString,
        response_deserializer=chatApp__pb2.groupMessage.FromString,
        )
    self.receiveOfflineMessageFromGroup = channel.unary_unary(
        '/groupChatServicer/receiveOfflineMessageFromGroup',
        request_serializer=chatApp__pb2.group_user.SerializeToString,
        response_deserializer=chatApp__pb2.groupMessageRepeated.FromString,
        )


class groupChatServicerServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def notifyOnlineStatus(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def getGroupMemebers(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def sendMessageToGroup(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def receiveMessageFromGroup(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def receiveOfflineMessageFromGroup(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_groupChatServicerServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'notifyOnlineStatus': grpc.unary_unary_rpc_method_handler(
          servicer.notifyOnlineStatus,
          request_deserializer=chatApp__pb2.informServerOnlineStatus.FromString,
          response_serializer=chatApp__pb2.informServerOnlineStatus.SerializeToString,
      ),
      'getGroupMemebers': grpc.unary_unary_rpc_method_handler(
          servicer.getGroupMemebers,
          request_deserializer=chatApp__pb2.group_user.FromString,
          response_serializer=chatApp__pb2.group_list.SerializeToString,
      ),
      'sendMessageToGroup': grpc.unary_unary_rpc_method_handler(
          servicer.sendMessageToGroup,
          request_deserializer=chatApp__pb2.groupMessage.FromString,
          response_serializer=chatApp__pb2.sentConfirmation.SerializeToString,
      ),
      'receiveMessageFromGroup': grpc.unary_stream_rpc_method_handler(
          servicer.receiveMessageFromGroup,
          request_deserializer=chatApp__pb2.group_user.FromString,
          response_serializer=chatApp__pb2.groupMessage.SerializeToString,
      ),
      'receiveOfflineMessageFromGroup': grpc.unary_unary_rpc_method_handler(
          servicer.receiveOfflineMessageFromGroup,
          request_deserializer=chatApp__pb2.group_user.FromString,
          response_serializer=chatApp__pb2.groupMessageRepeated.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'groupChatServicer', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
